;
; File generated by cc65 v 2.13.9
;
	.fopt		compiler,"cc65 v 2.13.9"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_spr_bright
	.import		_pal_bg_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_pad_poll
	.import		_pad_trigger
	.import		_bank_bg
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_unrle
	.export		_title
	.export		_slide
	.export		_currentSlide
	.export		_i
	.export		_index4
	.export		_bg_bright
	.export		_spr_bright
	.export		_sprid
	.export		_frameNr
	.export		_sprButtonX
	.export		_sprButtonY
	.export		_sprButtonTile
	.export		_sprButtonAttr
	.export		_sprPlayerX
	.export		_sprPlayerY
	.export		_sprPlayerTile
	.export		_sprPlayerAttr
	.export		_playerX
	.export		_playerY
	.export		_playerOriginY
	.export		_playerSpeed
	.export		_playerHotSpots
	.export		_buttonHotspots
	.export		_collisionState
	.export		_slidenr
	.export		_screens
	.export		_screen_state
	.export		_SPRITES
	.export		_palSprites
	.export		_palBG
	.export		_slide_1
	.export		_put_str
	.export		_fade_screen_in
	.export		_fade_screen_out
	.export		_render_slide
	.export		_drawSprites
	.export		_start_next_screen
	.export		_input
	.export		_start_title_screen
	.export		_collisions
	.export		_playerMovement
	.export		_game_logic
	.export		_pal_item
	.export		_main

.segment	"DATA"

_currentSlide:
	.byte	$00
_buttonX:
	.byte	$14
_buttonY:
	.byte	$C8
_sprButtonX:
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
_sprButtonY:
	.byte	$FF
	.byte	$FF
	.byte	$07
	.byte	$07
_sprButtonTile:
	.byte	$04
	.byte	$05
	.byte	$14
	.byte	$15
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
_sprButtonAttr:
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
_sprPlayerX:
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
_sprPlayerY:
	.byte	$FF
	.byte	$FF
	.byte	$07
	.byte	$07
_sprPlayerTile:
	.byte	$08
	.byte	$09
	.byte	$18
	.byte	$19
	.byte	$0A
	.byte	$0B
	.byte	$1A
	.byte	$1B
	.byte	$08
	.byte	$09
	.byte	$18
	.byte	$19
_sprPlayerAttr:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_playerX:
	.byte	$3C
_playerY:
	.byte	$C8
_playerOriginY:
	.byte	$C8
_playerSpeed:
	.byte	$00
_playerHotSpots:
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$10
	.byte	$08
_buttonHotspots:
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$10
	.byte	$08
_collisionState:
	.byte	$00
_screens:
	.addr	_title
	.addr	_slide
_slide_1:
	.addr	L0172
	.addr	L0174
	.addr	L0176
_pal_item:
	.byte	$00

.segment	"RODATA"

_title:
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$CD
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$FF
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$13
	.byte	$F2
	.byte	$00
	.byte	$F5
	.byte	$00
	.byte	$E8
	.byte	$00
	.byte	$F2
	.byte	$00
	.byte	$EA
	.byte	$00
	.byte	$F3
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$04
	.byte	$01
	.byte	$12
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$1E
	.byte	$1F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8E
	.byte	$8F
	.byte	$04
	.byte	$01
	.byte	$FE
	.byte	$04
	.byte	$01
	.byte	$8C
	.byte	$01
	.byte	$00
_slide:
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$FE
	.byte	$04
	.byte	$01
	.byte	$FE
	.byte	$04
	.byte	$01
	.byte	$FE
	.byte	$04
	.byte	$01
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$04
	.byte	$01
	.byte	$1A
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$04
	.byte	$A0
	.byte	$A1
	.byte	$A1
	.byte	$A2
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$A2
	.byte	$A1
	.byte	$A2
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$A2
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$04
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B3
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$B1
	.byte	$B0
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$04
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B3
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$B1
	.byte	$B0
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$F2
	.byte	$F5
	.byte	$E8
	.byte	$F2
	.byte	$EA
	.byte	$F3
	.byte	$01
	.byte	$00
_palSprites:
	.byte	$33
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$33
	.byte	$19
	.byte	$29
	.byte	$39
	.byte	$33
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$33
	.byte	$17
	.byte	$27
	.byte	$07
_palBG:
	.byte	$33
	.byte	$15
	.byte	$22
	.byte	$20
	.byte	$33
	.byte	$14
	.byte	$21
	.byte	$31
	.byte	$33
	.byte	$29
	.byte	$16
	.byte	$26
	.byte	$33
	.byte	$09
	.byte	$19
	.byte	$29
L0172:
	.byte	$56,$41,$52,$20,$4E,$45,$53,$4C,$59,$20,$3D,$20,$52,$45,$51,$55
	.byte	$49,$52,$45,$28,$27,$4E,$45,$53,$4C,$59,$27,$29,$00
L0176:
	.byte	$59,$45,$53,$20,$54,$48,$52,$45,$45,$20,$4C,$49,$4E,$45,$53,$00
L025C:
	.byte	$50,$52,$45,$53,$53,$20,$53,$54,$41,$52,$54,$00
L0174:
	.byte	$48,$45,$4E,$4B,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_index4:
	.res	1,$00
_bg_bright:
	.res	1,$00
_spr_bright:
	.res	1,$00
_sprid:
	.res	1,$00
_frameNr:
	.res	1,$00
_joy:
	.res	1,$00
_joytrig:
	.res	1,$00
_buttonState:
	.res	1,$00
_buttonState4:
	.res	1,$00
_playerState:
	.res	1,$00
_playerState4:
	.res	1,$00
_playerFast:
	.res	1,$00
_jump:
	.res	1,$00
_jumpStart:
	.res	1,$00
_slidenr:
	.res	2,$00
_screen_state:
	.res	1,$00
.segment	"OAM"
_SPRITES:
	.res	256,$00

; ---------------------------------------------------------------
; void __near__ put_str (unsigned int, __near__ const unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_str: near

.segment	"CODE"

;
; vram_adr(adr);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_adr
;
; if(!*str) break;
;
L017B:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	beq     L017C
;
; vram_put((*str++) + STRING_OFFSET);//-0x20 because ASCII code 0x20 is placed in tile 0 of the CHR
;
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0184
	inx
L0184:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	clc
	adc     #$A0
	jsr     _vram_put
;
; while(1)
;
	jmp     L017B
;
; }
;
L017C:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ fade_screen_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_screen_in: near

.segment	"CODE"

;
; for(i=0;i<16;i++)
;
	lda     #$00
L02B5:	sta     _i
	cmp     #$10
	bcs     L0188
;
; if(!(i&3))
;
	lda     _i
	and     #$03
	bne     L02B4
;
; bg_bright++;
;
	lda     _bg_bright
	clc
	adc     #$01
	sta     _bg_bright
;
; pal_bg_bright(bg_bright);
;
	jsr     _pal_bg_bright
;
; spr_bright++;
;
	lda     _spr_bright
	clc
	adc     #$01
	sta     _spr_bright
;
; pal_spr_bright(spr_bright);
;
	jsr     _pal_spr_bright
;
; for(i=0;i<16;i++)
;
L02B4:	lda     _i
	clc
	adc     #$01
	jmp     L02B5
;
; }
;
L0188:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_screen_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_screen_out: near

.segment	"CODE"

;
; for(i=0;i<16;i++)
;
	lda     #$00
L02B8:	sta     _i
	cmp     #$10
	bcs     L019A
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; if(!(i&3)) {
;
	lda     _i
	and     #$03
	bne     L02B7
;
; bg_bright--;
;
	lda     _bg_bright
	sec
	sbc     #$01
	sta     _bg_bright
;
; pal_bg_bright(bg_bright);
;
	jsr     _pal_bg_bright
;
; spr_bright--;
;
	lda     _spr_bright
	sec
	sbc     #$01
	sta     _spr_bright
;
; pal_spr_bright(spr_bright);
;
	jsr     _pal_spr_bright
;
; for(i=0;i<16;i++)
;
L02B7:	lda     _i
	clc
	adc     #$01
	jmp     L02B8
;
; }
;
L019A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ render_slide (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_render_slide: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; for (i = 0; i < 3; i++) {
;
	lda     #$00
L02BE:	sta     _i
	cmp     #$03
	bcs     L01AE
;
; put_str(NTADR_A(2, 2 * (int)i + 2), slide_1[(int)i]);
;
	jsr     decsp4
	lda     _i
	ldx     #$00
	asl     a
	bcc     L02BB
	inx
	clc
L02BB:	adc     #$02
	bcc     L01BB
	inx
L01BB:	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ora     #$02
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _i
	ldx     #$00
	asl     a
	bcc     L02BC
	inx
	clc
L02BC:	adc     #<(_slide_1)
	sta     ptr1
	txa
	adc     #>(_slide_1)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	jsr     _put_str
;
; for (i = 0; i < 3; i++) {
;
	lda     _i
	clc
	adc     #$01
	jmp     L02BE
;
; ppu_on_all();
;
L01AE:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ drawSprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawSprites: near

.segment	"CODE"

;
; index4 = 0;
;
	lda     #$00
	sta     _index4
;
; buttonState4 = buttonState << 2;
;
	lda     _buttonState
	asl     a
	asl     a
	sta     _buttonState4
;
; playerState4 = playerState << 2;
;
	lda     _playerState
	asl     a
	asl     a
	sta     _playerState4
;
; for (i = 0; i < 4; ++i) {
;
	lda     #$00
	sta     _i
L02C5:	lda     _i
	cmp     #$04
	bcc     L02C6
;
; }
;
	rts
;
; SPRITES[index4] = sprButtonY[i] + buttonY;
;
L02C6:	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L01D1
	inx
L01D1:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _sprButtonY,y
	clc
	adc     _buttonY
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = sprButtonTile[i + buttonState4];
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L01D8
	inx
L01D8:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	clc
	adc     _buttonState4
	bcc     L02C0
	inx
L02C0:	sta     ptr1
	txa
	clc
	adc     #>(_sprButtonTile)
	sta     ptr1+1
	ldy     #<(_sprButtonTile)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = sprButtonAttr[i];
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L01DE
	inx
L01DE:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _sprButtonAttr,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = sprButtonX[i] + buttonX;
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L01E5
	inx
L01E5:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _sprButtonX,y
	clc
	adc     _buttonX
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = sprPlayerY[i] + playerY;
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L01EC
	inx
L01EC:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _sprPlayerY,y
	clc
	adc     _playerY
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = sprPlayerTile[i + playerState4];
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L01F3
	inx
L01F3:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	clc
	adc     _playerState4
	bcc     L02C3
	inx
L02C3:	sta     ptr1
	txa
	clc
	adc     #>(_sprPlayerTile)
	sta     ptr1+1
	ldy     #<(_sprPlayerTile)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = sprPlayerAttr[i];
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L01F9
	inx
L01F9:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _sprPlayerAttr,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = sprPlayerX[i] + playerX;
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0200
	inx
L0200:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _sprPlayerX,y
	clc
	adc     _playerX
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; for (i = 0; i < 4; ++i) {
;
	inc     _i
	jmp     L02C5

.endproc

; ---------------------------------------------------------------
; void __near__ start_next_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_start_next_screen: near

.segment	"CODE"

;
; buttonState = 0;
;
	lda     #$00
	sta     _buttonState
;
; screen_state++;
;
	lda     _screen_state
	clc
	adc     #$01
	sta     _screen_state
;
; if (screen_state > 1) {
;
	cmp     #$02
	bcc     L0209
;
; screen_state = 0;
;
	lda     #$00
	sta     _screen_state
;
; fade_screen_in();
;
L0209:	jsr     _fade_screen_in
;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(screens[screen_state]);
;
	ldx     #$00
	lda     _screen_state
	asl     a
	bcc     L02C8
	inx
	clc
L02C8:	adc     #<(_screens)
	sta     ptr1
	txa
	adc     #>(_screens)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _vram_unrle
;
; render_slide();
;
	jsr     _render_slide
;
; pal_bg(palBG);
;
	lda     #<(_palBG)
	ldx     #>(_palBG)
	jsr     _pal_bg
;
; pal_spr(palSprites);
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; drawSprites();
;
	jsr     _drawSprites
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ input (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_input: near

.segment	"CODE"

;
; joytrig=pad_trigger(0);
;
	lda     #$00
	jsr     _pad_trigger
	sta     _joytrig
;
; joy=pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _joy
;
; playerFast = 0; // reset
;
	lda     #$00
	sta     _playerFast
;
; playerSpeed = 0;
;
	sta     _playerSpeed
;
; if (joy & PAD_START && screen_state == 0) {
;
	lda     _joy
	and     #$08
	beq     L02CC
	lda     _screen_state
	bne     L02CC
;
; fade_screen_out();
;
	jsr     _fade_screen_out
;
; start_next_screen();
;
	jsr     _start_next_screen
;
; slidenr = 0;
;
	lda     #$00
	sta     _slidenr
	sta     _slidenr+1
;
; if (joy & PAD_A) {
;
L02CC:	lda     _joy
	and     #$01
	beq     L02CD
;
; if (jump != 1) {
;
	lda     _jump
	cmp     #$01
	beq     L02CD
;
; jump = 1;
;
	lda     #$01
	sta     _jump
;
; jumpStart = frameNr;
;
	lda     _frameNr
	sta     _jumpStart
;
; if (joy & PAD_B) {
;
L02CD:	lda     _joy
	and     #$02
	beq     L02CE
;
; playerFast = 1;
;
	lda     #$01
	sta     _playerFast
;
; if (joy & PAD_LEFT) {
;
L02CE:	lda     _joy
	and     #$40
	beq     L02CF
;
; playerSpeed = -1;
;
	lda     #$FF
	sta     _playerSpeed
;
; if (playerFast == 1) {
;
	lda     _playerFast
	cmp     #$01
	bne     L02CF
;
; playerSpeed = -2;
;
	lda     #$FE
	sta     _playerSpeed
;
; if (joy & PAD_RIGHT) {
;
L02CF:	lda     _joy
	and     #$80
	beq     L0246
;
; playerSpeed = 1;
;
	lda     #$01
	sta     _playerSpeed
;
; if (playerFast == 1) {
;
	lda     _playerFast
	cmp     #$01
	bne     L0246
;
; playerSpeed = 2;
;
	lda     #$02
	sta     _playerSpeed
;
; }
;
L0246:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ start_title_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_start_title_screen: near

.segment	"CODE"

;
; fade_screen_in();
;
	jsr     _fade_screen_in
;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(palBG);
;
	lda     #<(_palBG)
	ldx     #>(_palBG)
	jsr     _pal_bg
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title);
;
	lda     #<(_title)
	ldx     #>(_title)
	jsr     _vram_unrle
;
; put_str(NTADR_A(10, 22), "PRESS START");
;
	jsr     decsp4
	lda     #$CA
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$22
	sta     (sp),y
	lda     #<(L025C)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L025C)
	sta     (sp),y
	jsr     _put_str
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ collisions (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collisions: near

.segment	"CODE"

;
; collisionState = 0;
;
	lda     #$00
	sta     _collisionState
;
; for (i = 0; i < 4; i++) {
;
L02D8:	sta     _i
	cmp     #$04
	bcs     L0263
;
; if (playerX + playerHotSpots[i] == buttonHotspots[i] + buttonX && playerY + playerHotSpots[i+1] == buttonHotspots[i+1]) {
;
	ldy     _i
	ldx     #$00
	lda     _playerHotSpots,y
	clc
	adc     _playerX
	bcc     L02D1
	inx
L02D1:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	ldx     #$00
	lda     _buttonHotspots,y
	clc
	adc     _buttonX
	bcc     L02D0
	inx
L02D0:	cpx     ptr1+1
	bne     L02D7
	cmp     ptr1
	bne     L02D7
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0272
	inx
L0272:	sta     ptr1
	txa
	clc
	adc     #>(_playerHotSpots)
	sta     ptr1+1
	ldy     #<(_playerHotSpots)
	ldx     #$00
	lda     (ptr1),y
	clc
	adc     _playerY
	bcc     L02D3
	inx
L02D3:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0274
	inx
L0274:	sta     ptr1
	txa
	clc
	adc     #>(_buttonHotspots)
	sta     ptr1+1
	ldy     #<(_buttonHotspots)
	ldx     #$00
	lda     (ptr1),y
	cpx     sreg+1
	bne     L02D7
	cmp     sreg
	bne     L02D7
;
; collisionState = 1;
;
	lda     #$01
	sta     _collisionState
;
; for (i = 0; i < 4; i++) {
;
L02D7:	lda     _i
	clc
	adc     #$01
	jmp     L02D8
;
; }
;
L0263:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ playerMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerMovement: near

.segment	"CODE"

;
; if (jump == 1 && frameNr > jumpStart + 120) {
;
	lda     _jump
	cmp     #$01
	bne     L02DB
	lda     _frameNr
	jsr     pusha0
	lda     _jumpStart
	clc
	adc     #$78
	bcc     L027C
	ldx     #$01
L027C:	jsr     tosicmp
	beq     L02DB
	bcc     L02DB
;
; --playerY;
;
	dec     _playerY
;
; if (frameNr > jumpStart + 120) {
;
L02DB:	lda     _frameNr
	jsr     pusha0
	lda     _jumpStart
	clc
	adc     #$78
	bcc     L0281
	ldx     #$01
L0281:	jsr     tosicmp
	bcc     L027F
	beq     L027F
;
; jump = 0;
;
	lda     #$00
	sta     _jump
;
; if (playerY > playerOriginY) {
;
L027F:	lda     _playerY
	sec
	sbc     _playerOriginY
	bcc     L02DC
	beq     L02DC
;
; ++playerY;
;
	inc     _playerY
;
; if (collisionState != 1) {
;
L02DC:	lda     _collisionState
	cmp     #$01
	beq     L0287
;
; playerX = playerX + playerSpeed;
;
	lda     _playerX
	clc
	adc     _playerSpeed
	sta     _playerX
;
; }
;
L0287:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_logic (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_logic: near

.segment	"CODE"

;
; collisions();
;
	jsr     _collisions
;
; input();
;
	jsr     _input
;
; drawSprites();
;
	jsr     _drawSprites
;
; playerMovement();
;
	jmp     _playerMovement

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; frameNr = 0;
;
	lda     #$00
	sta     _frameNr
;
; start_title_screen();
;
	jsr     _start_title_screen
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; pal_col(0,0x0d);
;
	lda     #$00
	jsr     pusha
	lda     #$0D
L02DF:	jsr     _pal_col
;
; ppu_wait_nmi();
;
L0299:	jsr     _ppu_wait_nmi
;
; ++frameNr;
;
	inc     _frameNr
;
; if (screen_state == 0) {
;
	lda     _screen_state
	bne     L02E1
;
; if (pal_item < 15) {
;
	lda     _pal_item
	cmp     #$0F
	bcs     L02E0
;
; pal_item = pal_item + 1;
;
	clc
	adc     #$01
;
; } else{
;
	jmp     L02DE
;
; pal_item = 0;
;
L02E0:	lda     #$00
L02DE:	sta     _pal_item
;
; input();
;
	jsr     _input
;
; pal_col(2,palSprites[pal_item]); // flickr mental
;
	lda     #$02
	jsr     pusha
	ldy     _pal_item
	lda     _palSprites,y
;
; } else if (screen_state == 1) {
;
	jmp     L02DF
L02E1:	lda     _screen_state
	cmp     #$01
	bne     L0299
;
; game_logic();
;
	jsr     _game_logic
;
; while(1) {
;
	jmp     L0299

.endproc

