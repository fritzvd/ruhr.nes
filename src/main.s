;
; File generated by cc65 v 2.13.9
;
	.fopt		compiler,"cc65 v 2.13.9"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_spr_bright
	.import		_pal_bg_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_pad_trigger
	.import		_bank_bg
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_unrle
	.export		_title
	.export		_slide0
	.export		_slide1
	.export		_slide2
	.export		_slide3
	.export		_slide4
	.export		_attributes_demo
	.export		_currentSlide
	.export		_slidenr
	.export		_slide
	.export		_i
	.export		_index4
	.export		_bg_bright
	.export		_spr_bright
	.export		_sprid
	.export		_frameNr
	.export		_sprPlayerX
	.export		_sprPlayerY
	.export		_sprPlayerTile
	.export		_sprPlayerAttr
	.export		_playerX
	.export		_playerY
	.export		_playerOriginY
	.export		_playerSpeed
	.export		_playerHotSpots
	.export		_buttonHotspots
	.export		_collisionState
	.export		_screen_state
	.export		_SPRITES
	.export		_palSprites
	.export		_palBG
	.export		_slides
	.export		_put_str
	.export		_fade_screen_in
	.export		_fade_screen_out
	.export		_render_slide
	.export		_drawSprites
	.export		_start_next_screen
	.export		_input
	.export		_start_title_screen
	.export		_playerMovement
	.export		_game_logic
	.export		_pal_item
	.export		_main

.segment	"DATA"

_sprPlayerX:
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
_sprPlayerY:
	.byte	$FF
	.byte	$FF
	.byte	$07
	.byte	$07
_sprPlayerTile:
	.byte	$08
	.byte	$09
	.byte	$18
	.byte	$19
	.byte	$0A
	.byte	$0B
	.byte	$1A
	.byte	$1B
	.byte	$08
	.byte	$09
	.byte	$18
	.byte	$19
_sprPlayerAttr:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_playerX:
	.byte	$3C
_playerY:
	.byte	$C8
_playerOriginY:
	.byte	$C8
_playerSpeed:
	.byte	$00
_playerHotSpots:
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$10
	.byte	$08
_buttonHotspots:
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$10
	.byte	$08
_collisionState:
	.byte	$00
_pal_item:
	.byte	$00

.segment	"RODATA"

_title:
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$CD
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$FF
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$13
	.byte	$F2
	.byte	$00
	.byte	$F5
	.byte	$00
	.byte	$E8
	.byte	$00
	.byte	$F2
	.byte	$00
	.byte	$EA
	.byte	$00
	.byte	$F3
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$04
	.byte	$01
	.byte	$12
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$1E
	.byte	$1F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$04
	.byte	$01
	.byte	$16
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8E
	.byte	$8F
	.byte	$04
	.byte	$01
	.byte	$FE
	.byte	$04
	.byte	$01
	.byte	$8C
	.byte	$01
	.byte	$00
_slide0:
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$C0
	.byte	$01
	.byte	$05
	.byte	$F3
	.byte	$F5
	.byte	$F0
	.byte	$E5
	.byte	$F2
	.byte	$C0
	.byte	$ED
	.byte	$E1
	.byte	$F2
	.byte	$E9
	.byte	$EF
	.byte	$F3
	.byte	$E3
	.byte	$F2
	.byte	$E9
	.byte	$F0
	.byte	$F4
	.byte	$DA
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$26
	.byte	$C0
	.byte	$01
	.byte	$07
	.byte	$F4
	.byte	$EF
	.byte	$EF
	.byte	$EC
	.byte	$F3
	.byte	$C0
	.byte	$E1
	.byte	$EE
	.byte	$E4
	.byte	$C0
	.byte	$F4
	.byte	$E9
	.byte	$F0
	.byte	$F3
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$28
	.byte	$C0
	.byte	$01
	.byte	$05
	.byte	$E6
	.byte	$EF
	.byte	$F2
	.byte	$C0
	.byte	$EE
	.byte	$E5
	.byte	$F3
	.byte	$C0
	.byte	$E4
	.byte	$E5
	.byte	$F6
	.byte	$E5
	.byte	$EC
	.byte	$EF
	.byte	$F0
	.byte	$ED
	.byte	$E5
	.byte	$EE
	.byte	$F4
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$FE
	.byte	$04
	.byte	$01
	.byte	$DF
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$04
	.byte	$01
	.byte	$1A
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$04
	.byte	$A0
	.byte	$A1
	.byte	$A1
	.byte	$A2
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$A2
	.byte	$A1
	.byte	$A2
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$A2
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$04
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B3
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$B1
	.byte	$B0
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$04
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B3
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$B1
	.byte	$B0
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$F2
	.byte	$F5
	.byte	$E8
	.byte	$F2
	.byte	$EA
	.byte	$F3
	.byte	$01
	.byte	$00
_slide1:
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$C0
	.byte	$01
	.byte	$06
	.byte	$E8
	.byte	$E9
	.byte	$C0
	.byte	$E9
	.byte	$C7
	.byte	$ED
	.byte	$C0
	.byte	$E6
	.byte	$F2
	.byte	$E9
	.byte	$F4
	.byte	$FA
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$2B
	.byte	$C0
	.byte	$C0
	.byte	$EE
	.byte	$EF
	.byte	$F4
	.byte	$C0
	.byte	$E1
	.byte	$C0
	.byte	$E3
	.byte	$EF
	.byte	$ED
	.byte	$F0
	.byte	$F5
	.byte	$F4
	.byte	$E5
	.byte	$F2
	.byte	$C0
	.byte	$F3
	.byte	$E3
	.byte	$E9
	.byte	$E5
	.byte	$EE
	.byte	$F4
	.byte	$E9
	.byte	$F3
	.byte	$F4
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$24
	.byte	$C0
	.byte	$01
	.byte	$03
	.byte	$E4
	.byte	$EF
	.byte	$E5
	.byte	$F3
	.byte	$C0
	.byte	$E1
	.byte	$C0
	.byte	$EC
	.byte	$EF
	.byte	$F4
	.byte	$C0
	.byte	$EF
	.byte	$E6
	.byte	$C0
	.byte	$F4
	.byte	$E8
	.byte	$E9
	.byte	$EE
	.byte	$E7
	.byte	$F3
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$26
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$FE
	.byte	$04
	.byte	$01
	.byte	$38
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$04
	.byte	$01
	.byte	$1A
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$04
	.byte	$A0
	.byte	$A1
	.byte	$A1
	.byte	$A2
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$A2
	.byte	$A1
	.byte	$A2
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$A2
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$04
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B3
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$B1
	.byte	$B0
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$04
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B3
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$B1
	.byte	$B0
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$F2
	.byte	$F5
	.byte	$E8
	.byte	$F2
	.byte	$EA
	.byte	$F3
	.byte	$01
	.byte	$00
_slide2:
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$C0
	.byte	$01
	.byte	$06
	.byte	$E3
	.byte	$EF
	.byte	$EE
	.byte	$F3
	.byte	$F4
	.byte	$F2
	.byte	$E1
	.byte	$E9
	.byte	$EE
	.byte	$F4
	.byte	$F3
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$2C
	.byte	$C0
	.byte	$01
	.byte	$03
	.byte	$E4
	.byte	$EF
	.byte	$E9
	.byte	$EE
	.byte	$E7
	.byte	$C0
	.byte	$EE
	.byte	$E5
	.byte	$F7
	.byte	$C0
	.byte	$F4
	.byte	$E8
	.byte	$E9
	.byte	$EE
	.byte	$E7
	.byte	$F3
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$2A
	.byte	$C0
	.byte	$01
	.byte	$0A
	.byte	$E4
	.byte	$E5
	.byte	$ED
	.byte	$EF
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$FE
	.byte	$04
	.byte	$01
	.byte	$A9
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$04
	.byte	$01
	.byte	$1A
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$04
	.byte	$A0
	.byte	$A1
	.byte	$A1
	.byte	$A2
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$A2
	.byte	$A1
	.byte	$A2
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$A2
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$04
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B3
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$B1
	.byte	$B0
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$04
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B3
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$B1
	.byte	$B0
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$F2
	.byte	$F5
	.byte	$E8
	.byte	$F2
	.byte	$EA
	.byte	$F3
	.byte	$01
	.byte	$00
_slide3:
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$E6
	.byte	$F5
	.byte	$EE
	.byte	$C0
	.byte	$E6
	.byte	$E1
	.byte	$E3
	.byte	$F4
	.byte	$F3
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$35
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$CA
	.byte	$C0
	.byte	$D1
	.byte	$CE
	.byte	$D7
	.byte	$D9
	.byte	$C0
	.byte	$ED
	.byte	$E8
	.byte	$FA
	.byte	$C0
	.byte	$D6
	.byte	$D5
	.byte	$D0
	.byte	$D2
	.byte	$C0
	.byte	$E3
	.byte	$F0
	.byte	$F5
	.byte	$CF
	.byte	$E1
	.byte	$F0
	.byte	$F5
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$27
	.byte	$CA
	.byte	$C0
	.byte	$D5
	.byte	$CE
	.byte	$D3
	.byte	$D7
	.byte	$C0
	.byte	$ED
	.byte	$E8
	.byte	$FA
	.byte	$C0
	.byte	$F0
	.byte	$F0
	.byte	$F5
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$30
	.byte	$CA
	.byte	$C0
	.byte	$D2
	.byte	$EB
	.byte	$E2
	.byte	$C0
	.byte	$F2
	.byte	$E1
	.byte	$ED
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$35
	.byte	$CA
	.byte	$C0
	.byte	$D2
	.byte	$D5
	.byte	$D6
	.byte	$C0
	.byte	$F8
	.byte	$C0
	.byte	$D2
	.byte	$D4
	.byte	$D0
	.byte	$C0
	.byte	$C8
	.byte	$D2
	.byte	$D2
	.byte	$D4
	.byte	$C9
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$2D
	.byte	$CA
	.byte	$C0
	.byte	$D6
	.byte	$D4
	.byte	$C0
	.byte	$E3
	.byte	$EF
	.byte	$EC
	.byte	$EF
	.byte	$F2
	.byte	$F3
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$33
	.byte	$CA
	.byte	$C0
	.byte	$D3
	.byte	$C0
	.byte	$E3
	.byte	$EF
	.byte	$EC
	.byte	$EF
	.byte	$F2
	.byte	$F3
	.byte	$C0
	.byte	$F0
	.byte	$E5
	.byte	$F2
	.byte	$C0
	.byte	$F4
	.byte	$E9
	.byte	$EC
	.byte	$E5
	.byte	$CF
	.byte	$F3
	.byte	$F0
	.byte	$F2
	.byte	$E9
	.byte	$F4
	.byte	$E5
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$24
	.byte	$CA
	.byte	$C0
	.byte	$D8
	.byte	$C0
	.byte	$C7
	.byte	$EB
	.byte	$E5
	.byte	$F9
	.byte	$F3
	.byte	$C7
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$34
	.byte	$CA
	.byte	$C0
	.byte	$D8
	.byte	$C0
	.byte	$F3
	.byte	$F0
	.byte	$F2
	.byte	$E9
	.byte	$F4
	.byte	$E5
	.byte	$F3
	.byte	$C0
	.byte	$F0
	.byte	$E5
	.byte	$F2
	.byte	$C0
	.byte	$F3
	.byte	$E3
	.byte	$E1
	.byte	$EE
	.byte	$EC
	.byte	$E9
	.byte	$EE
	.byte	$E5
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$26
	.byte	$CA
	.byte	$C0
	.byte	$E3
	.byte	$E8
	.byte	$F2
	.byte	$C0
	.byte	$E1
	.byte	$EE
	.byte	$E4
	.byte	$C0
	.byte	$F0
	.byte	$F2
	.byte	$E7
	.byte	$C0
	.byte	$F2
	.byte	$EF
	.byte	$ED
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$66
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$04
	.byte	$01
	.byte	$1A
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$04
	.byte	$A0
	.byte	$A1
	.byte	$A1
	.byte	$A2
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$A2
	.byte	$A1
	.byte	$A2
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$A2
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$04
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B3
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$B1
	.byte	$B0
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$04
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B3
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$B1
	.byte	$B0
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$F2
	.byte	$F5
	.byte	$E8
	.byte	$F2
	.byte	$EA
	.byte	$F3
	.byte	$01
	.byte	$00
_slide4:
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$E3
	.byte	$EF
	.byte	$EE
	.byte	$F3
	.byte	$F4
	.byte	$F2
	.byte	$E1
	.byte	$E9
	.byte	$EE
	.byte	$F4
	.byte	$F3
	.byte	$C0
	.byte	$F2
	.byte	$E5
	.byte	$E1
	.byte	$EC
	.byte	$EC
	.byte	$F9
	.byte	$C0
	.byte	$F3
	.byte	$F5
	.byte	$E3
	.byte	$EB
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$27
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$FE
	.byte	$04
	.byte	$01
	.byte	$B8
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$04
	.byte	$01
	.byte	$1A
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$04
	.byte	$A0
	.byte	$A1
	.byte	$A1
	.byte	$A2
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$A2
	.byte	$A1
	.byte	$A2
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$A2
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$04
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B3
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$B1
	.byte	$B0
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$04
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B3
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$B1
	.byte	$B0
	.byte	$B3
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$F2
	.byte	$F5
	.byte	$E8
	.byte	$F2
	.byte	$EA
	.byte	$F3
	.byte	$01
	.byte	$00
_attributes_demo:
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$16
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$FE
	.byte	$02
	.byte	$04
	.byte	$FE
	.byte	$02
	.byte	$04
	.byte	$FE
	.byte	$02
	.byte	$04
	.byte	$99
	.byte	$54
	.byte	$5E
	.byte	$55
	.byte	$04
	.byte	$35
	.byte	$05
	.byte	$04
	.byte	$07
	.byte	$04
	.byte	$00
_palSprites:
	.byte	$33
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$33
	.byte	$19
	.byte	$29
	.byte	$39
	.byte	$33
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$33
	.byte	$17
	.byte	$27
	.byte	$07
_palBG:
	.byte	$33
	.byte	$15
	.byte	$22
	.byte	$20
	.byte	$33
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$33
	.byte	$15
	.byte	$25
	.byte	$36
	.byte	$33
	.byte	$2C
	.byte	$13
	.byte	$04
_slides:
	.addr	_slide0
	.addr	_slide1
	.addr	_slide2
	.addr	_slide3
	.addr	_slide4
	.addr	_attributes_demo
L05CD:
	.byte	$50,$52,$45,$53,$53,$20,$53,$54,$41,$52,$54,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_currentSlide:
	.res	2,$00
_slidenr:
	.res	2,$00
_slide:
	.res	2,$00
_i:
	.res	1,$00
_index4:
	.res	1,$00
_bg_bright:
	.res	1,$00
_spr_bright:
	.res	1,$00
_sprid:
	.res	1,$00
_frameNr:
	.res	1,$00
_other_slide:
	.res	1,$00
_joy:
	.res	1,$00
_playerState:
	.res	1,$00
_playerState4:
	.res	1,$00
_playerFast:
	.res	1,$00
_jump:
	.res	1,$00
_jumpStart:
	.res	1,$00
_screen_state:
	.res	1,$00
.segment	"OAM"
_SPRITES:
	.res	256,$00

; ---------------------------------------------------------------
; void __near__ put_str (unsigned int, __near__ const unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_str: near

.segment	"CODE"

;
; vram_adr(adr);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_adr
;
; if(!*str) break;
;
L051C:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	beq     L051D
;
; vram_put((*str++) + STRING_OFFSET);//-0x20 because ASCII code 0x20 is placed in tile 0 of the CHR
;
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0525
	inx
L0525:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	clc
	adc     #$A0
	jsr     _vram_put
;
; while(1)
;
	jmp     L051C
;
; }
;
L051D:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ fade_screen_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_screen_in: near

.segment	"CODE"

;
; for(i=0;i<16;i++)
;
	lda     #$00
L0612:	sta     _i
	cmp     #$10
	bcs     L0529
;
; if(!(i&3))
;
	lda     _i
	and     #$03
	bne     L0611
;
; bg_bright++;
;
	lda     _bg_bright
	clc
	adc     #$01
	sta     _bg_bright
;
; pal_bg_bright(bg_bright);
;
	jsr     _pal_bg_bright
;
; spr_bright++;
;
	lda     _spr_bright
	clc
	adc     #$01
	sta     _spr_bright
;
; pal_spr_bright(spr_bright);
;
	jsr     _pal_spr_bright
;
; for(i=0;i<16;i++)
;
L0611:	lda     _i
	clc
	adc     #$01
	jmp     L0612
;
; }
;
L0529:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_screen_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_screen_out: near

.segment	"CODE"

;
; for(i=0;i<16;i++)
;
	lda     #$00
L0615:	sta     _i
	cmp     #$10
	bcs     L053B
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; if(!(i&3)) {
;
	lda     _i
	and     #$03
	bne     L0614
;
; bg_bright--;
;
	lda     _bg_bright
	sec
	sbc     #$01
	sta     _bg_bright
;
; pal_bg_bright(bg_bright);
;
	jsr     _pal_bg_bright
;
; spr_bright--;
;
	lda     _spr_bright
	sec
	sbc     #$01
	sta     _spr_bright
;
; pal_spr_bright(spr_bright);
;
	jsr     _pal_spr_bright
;
; for(i=0;i<16;i++)
;
L0614:	lda     _i
	clc
	adc     #$01
	jmp     L0615
;
; }
;
L053B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ render_slide (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_render_slide: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(slides[slidenr]);
;
	lda     _slidenr
	ldx     _slidenr+1
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_slides)
	sta     ptr1
	lda     tmp1
	adc     #>(_slides)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _vram_unrle
;
; other_slide = FALSE;
;
	lda     #$00
	sta     _other_slide
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ drawSprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawSprites: near

.segment	"CODE"

;
; index4 = 0;
;
	lda     #$00
	sta     _index4
;
; playerState4 = playerState << 2;
;
	lda     _playerState
	asl     a
	asl     a
	sta     _playerState4
;
; for (i = 0; i < 4; ++i) {
;
	lda     #$00
	sta     _i
L0619:	lda     _i
	cmp     #$04
	bcc     L061A
;
; }
;
	rts
;
; SPRITES[index4] = sprPlayerY[i] + playerY;
;
L061A:	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0567
	inx
L0567:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _sprPlayerY,y
	clc
	adc     _playerY
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = sprPlayerTile[i + playerState4];
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L056E
	inx
L056E:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	clc
	adc     _playerState4
	bcc     L0617
	inx
L0617:	sta     ptr1
	txa
	clc
	adc     #>(_sprPlayerTile)
	sta     ptr1+1
	ldy     #<(_sprPlayerTile)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = sprPlayerAttr[i];
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0574
	inx
L0574:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _sprPlayerAttr,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = sprPlayerX[i] + playerX;
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L057B
	inx
L057B:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _sprPlayerX,y
	clc
	adc     _playerX
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; for (i = 0; i < 4; ++i) {
;
	inc     _i
	jmp     L0619

.endproc

; ---------------------------------------------------------------
; void __near__ start_next_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_start_next_screen: near

.segment	"CODE"

;
; screen_state++;
;
	lda     _screen_state
	clc
	adc     #$01
	sta     _screen_state
;
; if (screen_state > 1) {
;
	cmp     #$02
	bcc     L0582
;
; screen_state = 0;
;
	lda     #$00
	sta     _screen_state
;
; fade_screen_in();
;
L0582:	jsr     _fade_screen_in
;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(palBG);
;
	lda     #<(_palBG)
	ldx     #>(_palBG)
	jsr     _pal_bg
;
; pal_spr(palSprites);
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; pal_col(2,palBG[6]); // flickr mental
;
	lda     #$02
	jsr     pusha
	lda     _palBG+6
	jsr     _pal_col
;
; drawSprites();
;
	jsr     _drawSprites
;
; render_slide();
;
	jsr     _render_slide
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ input (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_input: near

.segment	"CODE"

;
; joy = pad_trigger(0);
;
	lda     #$00
	jsr     _pad_trigger
	sta     _joy
;
; playerFast = 0; // reset
;
	lda     #$00
	sta     _playerFast
;
; playerSpeed = 0;
;
	sta     _playerSpeed
;
; if (joy & PAD_START && screen_state == 0) {
;
	lda     _joy
	and     #$08
	beq     L061E
	lda     _screen_state
	bne     L061E
;
; fade_screen_out();
;
	jsr     _fade_screen_out
;
; start_next_screen();
;
	jsr     _start_next_screen
;
; if (joy & PAD_A) {
;
L061E:	lda     _joy
	and     #$01
	beq     L061F
;
; if (slidenr > 0) {
;
	lda     _slidenr
	cmp     #$01
	lda     _slidenr+1
	sbc     #$00
	bvs     L05A5
	eor     #$80
L05A5:	bpl     L061F
;
; --slidenr;
;
	lda     _slidenr
	sec
	sbc     #$01
	sta     _slidenr
	bcs     L05A7
	dec     _slidenr+1
;
; other_slide = TRUE;
;
L05A7:	lda     #$01
	sta     _other_slide
;
; if (joy & PAD_B) {
;
L061F:	lda     _joy
	and     #$02
	beq     L0620
;
; if (slidenr < MAXSLIDENR) {
;
	lda     _slidenr
	cmp     #$06
	lda     _slidenr+1
	sbc     #$00
	bvc     L05AE
	eor     #$80
L05AE:	bpl     L0620
;
; ++slidenr;
;
	inc     _slidenr
	bne     L05B0
	inc     _slidenr+1
;
; other_slide = TRUE;
;
L05B0:	lda     #$01
	sta     _other_slide
;
; if (joy & PAD_LEFT) {
;
L0620:	lda     _joy
	and     #$40
	beq     L0621
;
; playerSpeed = -1;
;
	lda     #$FF
	sta     _playerSpeed
;
; if (joy & PAD_RIGHT) {
;
L0621:	lda     _joy
	and     #$80
	beq     L05B7
;
; playerSpeed = 1;
;
	lda     #$01
	sta     _playerSpeed
;
; }
;
L05B7:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ start_title_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_start_title_screen: near

.segment	"CODE"

;
; fade_screen_in();
;
	jsr     _fade_screen_in
;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(palBG);
;
	lda     #<(_palBG)
	ldx     #>(_palBG)
	jsr     _pal_bg
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title);
;
	lda     #<(_title)
	ldx     #>(_title)
	jsr     _vram_unrle
;
; put_str(NTADR_A(10, 22), "PRESS START");
;
	jsr     decsp4
	lda     #$CA
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$22
	sta     (sp),y
	lda     #<(L05CD)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L05CD)
	sta     (sp),y
	jsr     _put_str
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ playerMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerMovement: near

.segment	"CODE"

;
; if (jump == 1 && frameNr > jumpStart + 120) {
;
	lda     _jump
	cmp     #$01
	bne     L0624
	lda     _frameNr
	jsr     pusha0
	lda     _jumpStart
	clc
	adc     #$78
	bcc     L05D4
	ldx     #$01
L05D4:	jsr     tosicmp
	beq     L0624
	bcc     L0624
;
; --playerY;
;
	dec     _playerY
;
; if (frameNr > jumpStart + 120) {
;
L0624:	lda     _frameNr
	jsr     pusha0
	lda     _jumpStart
	clc
	adc     #$78
	bcc     L05D9
	ldx     #$01
L05D9:	jsr     tosicmp
	bcc     L05D7
	beq     L05D7
;
; jump = 0;
;
	lda     #$00
	sta     _jump
;
; if (playerY > playerOriginY) {
;
L05D7:	lda     _playerY
	sec
	sbc     _playerOriginY
	bcc     L0625
	beq     L0625
;
; ++playerY;
;
	inc     _playerY
;
; if (collisionState != 1) {
;
L0625:	lda     _collisionState
	cmp     #$01
	beq     L05DF
;
; playerX = playerX + playerSpeed;
;
	lda     _playerX
	clc
	adc     _playerSpeed
	sta     _playerX
;
; }
;
L05DF:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_logic (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_logic: near

.segment	"CODE"

;
; input();
;
	jsr     _input
;
; drawSprites();
;
	jsr     _drawSprites
;
; playerMovement();
;
	jmp     _playerMovement

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; other_slide = FALSE;
;
	lda     #$00
	sta     _other_slide
;
; frameNr = 0;
;
	sta     _frameNr
;
; start_title_screen();
;
	jsr     _start_title_screen
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; slidenr = 0;
;
	lda     #$00
	sta     _slidenr
	sta     _slidenr+1
;
; pal_col(0,0x0d);
;
	jsr     pusha
	lda     #$0D
L0628:	jsr     _pal_col
;
; ppu_wait_nmi();
;
L05F4:	jsr     _ppu_wait_nmi
;
; if (screen_state == 0) {
;
	lda     _screen_state
	bne     L05F9
;
; if (pal_item < 15) {
;
	lda     _pal_item
	cmp     #$0F
	bcs     L0629
;
; pal_item = pal_item + 1;
;
	clc
	adc     #$01
;
; } else{
;
	jmp     L0627
;
; pal_item = 0;
;
L0629:	lda     #$00
L0627:	sta     _pal_item
;
; input();
;
	jsr     _input
;
; pal_col(2,palSprites[pal_item]); // flickr mental
;
	lda     #$02
	jsr     pusha
	ldy     _pal_item
	lda     _palSprites,y
;
; } else {
;
	jmp     L0628
;
; render_slide();
;
L05F9:	jsr     _render_slide
;
; while(!other_slide) {
;
	jmp     L060D
;
; game_logic();
;
L060B:	jsr     _game_logic
;
; while(!other_slide) {
;
L060D:	lda     _other_slide
	beq     L060B
;
; while(1) {
;
	jmp     L05F4

.endproc

